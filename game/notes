# SHOWING VIDEOS W/ POSITION PROPERTIES

    # image launch = Movie(play="video.webm", pos=(10,10), anchor=(0,0))
    # show launch behind niji
    # hide launch

# SHOWING VIDEO FULL SCREEN PYTHON WAY
    # $ renpy.movie_cutscene("video.webm")



# NVL MODE (whole screen with textbox)

    # define characters with kind=nvl
    # define nvln = Character("Nijika", color="#f5d833", kind=nvl)   then use chara

    # nvl clear
    # nvl hide dissolve
    # nvl show dissolve

    # Also provide menu choice but must be last on the screen
    # Text tags like {w} work in NVL mode. As does the "extend" special character


    # Sample
    # define menu = nvl_menu
    # menu:




# TEXT TAGS

    # {b}bold{/b}, {i}italic{/i}, {s}struckthrough{/s}, or {u}underlined{/u}
    # {a=https://www.renpy.org}link to a website{/a} or {a=jump:a_label}jump to a label{/a}
    # The alpha text tag makes text {alpha=.5}translucent{/alpha}
    # {color=#0080c0}color{/color}

    # The cps text tag {cps=25}makes text type itself out slowly{/cps}, even if slow text is off.
    # The cps tag can also be relative to the default speed, {cps=*2}doubling{/cps} or {cps=*0.5}halving{/cps} it
    # {font=DejaVuSans-Bold.ttf}DejaVuSans-Bold.ttf{/font}
    # The k tag changes kerning. It can space the letters of a word {k=-.5}closer together{/k} or {k=.5}farther apart{/k}
  
    # {size=+10}bigger{/size} or {size=-10}smaller{/size}, or set it to a {size=30}fixed size{/size}
    # {space=30} adds horizontal space in text.{vspace=30}The vspace tag adds vertical space between lines
    # The p tag breaks a paragraph,{p}and waits for the player to click  
    # If it is given a number as an argument,{p=1.5}it waits that many seconds.

    # The w tag also waits for a click,{w} except it doesn't break lines,{w=.5} the way p does. 
    
    # "The nw tag causes Ren'Py to continue past slow text,{nw}"
    # with flashbulb
    # extend " to the next statement." 

    # To break a line without pausing, one can write \n. \' and \" include quotes in the text.
    # When the variable name is followed by !q, special characters are quoted. This displays the raw [variable!q], including the italics tags

    # $ translatable = _("translatable text")
    # When the variable name is followed by !t, it is translated to [variable!t]. It could be something else in a different language
  
    # Interpolation example:  $ variable = "random text"         niji "This displays the [variable]"




# CHARACTER OBJECTS

    # define e_shout = Character("Eileen", who_color="#c8ffc8", what_size=34)     changes text size to big
    # define e_whisper = Character("Eileen", who_color="#c8ffc8", what_size=18)   changes text size to small

    # window_background="gui/startextbox.png"    changes textbox of character  |  can be set to "None"
    # who_color for name color      what_color for text color    same as who_font / what_font
    # who_bold=True    what_italic=True

    # what_outlines=[( 1, "#008000", 0, 0 )] )   puts an outline around the text
    # [(size of the outline in px, hex-code of the color, x, y offsets)]

    # what_xalign=0.5, what_textalign=0.5, what_layout='subtitle'
    # The what_xalign property controls where all the text itself is placed within the textbox, while what_textalign controls where rows of text are placed relative to each other
    # Setting what_layout to 'subtitle' puts Ren'Py in subtitle mode, which tries to even out the length of every line of text in a block.


    # EXAMPLE CODE 
        # define e8 = Character(
        # None,
        # window_background = None,

        # what_size=28,
        # what_outlines=[( 1, "#008000", 0, 0 )],
        # what_xalign=0.5,
        # what_textalign=0.5,
        # what_layout='subtitle')
 

    # what_prefix='"', what_suffix='"'     Adds prefix suffix to text
    # define l8 = Character(kind=e8, what_outlines=[( 1, "#c00000", 0, 0 )] )     copies e8's style then change only the outline



# IMAGE / SIMPLE DISPLAYABLES

    # image logo base = "logo base.png"  or no .png(ref to 2nd img not the same as 1st one)
     
    # OPAQUE    ( 3/6 digit value )
    # image bg red = "#c00"
    # image bg blue = "#0000cc"

    # TRANSLUCENT/ALPHA    (4/8 digit)
    # image overlay red = "#c008"
    #image overlay blue = "#0000cc88"


    # image logo rotated = Transform("logo base", rotate=45)
    # image logo solidexample = Solid("#0000cc", xysize=(200, 200))

    # image logo text = Text("This is a text displayable.", size=30)
    # image logo text rotate = Transform(Text("This is a text displayable.", size=30), rotate=45)


    # GROUPING DISPLAYABLES IN 1 FROM BOTTOM TO TOP
        # image logo composite = Composite((240, 460),
        # (0, 0), "logo blink",
        # (0, 50), "logo base.png",
        # (0, 100), "logo base.png")


    # FRAME 
        # image ninepatch frame = Frame("ninepatch", 40, 40, 40, 40)    expands/shrink the middle / scaling while keeping corners the same
        #  left, top, right, bottom border

        # image ninepatch frame tiled = Frame("ninepatch", 40, 40, 40, 40, tile=True)     this is tile sections(adds more tiles) rather than scaling
 
 
 

# TRANSITIONS

    # SIMPLE
        # define flashbulb = Fade(0.2, 0.0, 0.8, color='#fff')     with flashbulb  
        # with pixellate
        # with vpunch
        # with hpunch   horizontal motion


    # ImageDissolve  (starts w/ white then black | can be reversed)
        # with blinds
        # with squares

        # define circleirisin = ImageDissolve("imagedissolve circleiris.png", 1.0, 8 , reverse=True)
        # scene black
        # with circleirisin

        # define circleirisout = ImageDissolve("imagedissolve circleiris.png", 1.0, 8)
        # scene bg washington
        # with circleirisout

        # define circlewipe = ImageDissolve("imagedissolve circlewipe.png", 1.0, 8)
        # show bg whitehouse
        # with circlewipe

        # define dream = ImageDissolve("imagedissolve dream.png", 2.0, 64)

        # define teleport = ImageDissolve("imagedissolve teleport.png", 1.0, 0)
        # show eileen happy
        # with teleport
 
 
    # MoveTransition
        # moveoutleft/right/top/bottom
        # moveinleft/right/top/bottom
        # zoomout/in
    

    # CropMove
        # with wiperight/left/up/down
        # slideright/l/u/d
        # slideawayright/l/u/d
        # irisout/in

    
    # PushMove
        # pushright/l/u/d

    
    # AlphaDissolve  example:
# image alpha_control:
    # "spotlight.png"

    # anchor (.5, .5)

    # parallel:
        # zoom 0
        # linear .5 zoom .75
        # pause 2
        # linear 1.0 zoom 4.0

    # parallel:
        # xpos 0.0 ypos .6
        # linear 1.5 xpos 1.0
        # linear 1.0 xpos .5 ypos .2

    # pause .5
    # repeat

# define alpha_example = AlphaDissolve("alpha_control", delay=3.5)

    # scene bg washington
    # show eileen happy at center
    # with alpha_example
 
 


# POSITION PROPERTIES

    # xpos
    # xanchor
    # xalign    = xpos and xanchor same value
    # xcenter
    # xoffset     applied after everything else | right/bottom | use negative no. for left/top
    # align|pos|anchor|center (0.5, 0.1)


 

# TRANSFORM & ANIMATION  (ATL = Animation and Transform Language)

    # Image Statement example

        # image eileen animated:
        # "eileen vhappy"
        # pause .5
        # "eileen happy"
        # pause .5
        # repeat    (or "repeat 2" so it'll loop twice only)

    # Transform Statement

    # Show Statement example

        # show logo base:
        # xalign .3 yalign .7
        # linear 1.0 xalign .7 yalign .3
        # linear 1.0 xalign .3 yalign .7
        # repeat

        # show logo base:
        # yoffset 10

        # linear (moves from one place slowly depends on time to another)
        # block:
        # time 11.5(any no.)      will stop everything after time limit
        # parallel:       lets you run two blocks
        # choice:      random block will be executed by renpy


 
 
# TRANSFORMATION PROPERTIES

    #PANNING SAMPLE  (use img larger than screen)  by giving xpos/ypos negative values
        # show bg band:
            # xanchor 0 yanchor 0
            # xpos 0 ypos -428
            # linear 3.0 xpos -220 ypos -60

    # show logo small:
        # anchor (0.5, 0.5)
        # around (640, 216)       sets the center of the coordinate system to given coordinates(in px)
        # angle 270               angle in degrees | 0 angle at the top of the screen | clockwise
        # radius 200              distance in px from the anchor of displayable to the center of coordinate system


    # ZOOM
        # show logo base:
            # zoom 1.0
            # linear 1.0 zoom 1.5
            # linear 1.0 zoom 1.0
            # repeat

        # xzoom/yzoom 1.5(any number)       using negative will flip img
        # size (350,540)
        # alpha 1.0        change opacity
        # rotate 360(0-360)
        # rotate_pad False      change size as it rotates
        # xtile/ytile 3(any no.)     make tiles of img

        # crop (0, 0, 117, 360)

        # ZOOM/FOCUS   example
            # show bg washington:
                # crop (0, 0, 800, 600)    (x, y, width, height)
                # size (1280, 720)
                # linear 4.0 crop (451, 437, 409, 230)

        # PAN/PANORAMA   example
            # show bg panorama:
                # xpan 0      angle in degrees | 0 = center
                # linear 10.0 xpan 360
                #repeat

    # easein     Start fast, then slow down.
    # easeout    Start slow, then speed up.




#